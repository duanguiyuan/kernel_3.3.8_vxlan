Index: linux-3.3.8/arch/mips/ath79/Kconfig
===================================================================
--- linux-3.3.8.orig/arch/mips/ath79/Kconfig
+++ linux-3.3.8/arch/mips/ath79/Kconfig
@@ -176,6 +176,19 @@ config ATH79_MACH_AP152
 	  Say 'Y' here if you want your kernel to support the
 	  Atheros AP152 reference board.
 
+config ATH79_MACH_CUSTOM_TA361
+	bool "Custom TA361 board"
+	select SOC_QCA953X
+	select ATH79_DEV_GPIO_BUTTONS
+	select ATH79_DEV_LEDS_GPIO
+	select ATH79_DEV_SPI
+	select ATH79_DEV_USB
+	select ATH79_DEV_WMAC
+	select ATH79_DEV_ETH
+	select ATH79_DEV_M25P80
+	help
+	  Say 'Y' here if you want your kernel to support the
+	  Custom TA361 board.
 config ATH79_MACH_AP81
 	bool "Atheros AP81 reference board"
 	select SOC_AR913X
Index: linux-3.3.8/arch/mips/ath79/Makefile
===================================================================
--- linux-3.3.8.orig/arch/mips/ath79/Makefile
+++ linux-3.3.8/arch/mips/ath79/Makefile
@@ -123,4 +123,4 @@ obj-$(CONFIG_ATH79_MACH_WZR_HP_G300NH2)
 obj-$(CONFIG_ATH79_MACH_WZR_HP_AG300H)	+= mach-wzr-hp-ag300h.o
 obj-$(CONFIG_ATH79_MACH_WZR_HP_G450H)	+= mach-wzr-hp-g450h.o
 obj-$(CONFIG_ATH79_MACH_ZCN_1523H)	+= mach-zcn-1523h.o
-
+obj-$(CONFIG_ATH79_MACH_CUSTOM_TA361)	+= mach-ta361.o
Index: linux-3.3.8/arch/mips/ath79/dev-m25p80.c
===================================================================
--- linux-3.3.8.orig/arch/mips/ath79/dev-m25p80.c
+++ linux-3.3.8/arch/mips/ath79/dev-m25p80.c
@@ -22,12 +22,56 @@ static struct ath79_spi_controller_data
 	.cs_line = 0,
 };
 
+#if 0
 static struct ath79_spi_controller_data ath79_spi1_cdata =
 {
 	.cs_type = ATH79_SPI_CS_TYPE_INTERNAL,
 	.cs_line = 1,
 };
+#endif
 
+#if 1
+static struct ath79_spi_controller_data ath79_spi_xra1403_cdata_0 =
+{
+	.cs_type = ATH79_SPI_CS_TYPE_INTERNAL,
+	.cs_line = 1,
+};
+
+static struct spi_board_info ath79_spi_info[] = {
+	{
+		.bus_num	= 0,
+		.chip_select	= 0,
+		.max_speed_hz	= 25000000,
+		.modalias	= "m25p80",
+		.controller_data = &ath79_spi0_cdata,
+	},
+	{
+		.bus_num	= 0,
+		.chip_select	= 1,
+		.max_speed_hz   = 26000000, /*max 26Mhz*/
+		.modalias	= "xra1403-0",
+		.controller_data = &ath79_spi_xra1403_cdata_0,
+	}
+};
+
+struct ath79_spi_platform_data ath79_spi_data;
+
+void ath79_init_m25p80_pdata(struct flash_platform_data *pdata)
+{
+	ath79_spi_data.bus_num = 0;
+	ath79_spi_data.num_chipselect = 2;
+	ath79_spi0_cdata.is_flash = true;
+	ath79_spi_xra1403_cdata_0.is_flash = false;
+	ath79_spi_info[0].platform_data = pdata;
+}
+
+void __init ath79_register_m25p80(struct flash_platform_data *pdata)
+{
+	ath79_init_m25p80_pdata(pdata);
+	ath79_register_spi(&ath79_spi_data, ath79_spi_info, 2);
+}
+
+#else
 static struct spi_board_info ath79_spi_info[] = {
 	{
 		.bus_num	= 0,
@@ -60,6 +104,7 @@ void __init ath79_register_m25p80(struct
 	ath79_init_m25p80_pdata(pdata);
 	ath79_register_spi(&ath79_spi_data, ath79_spi_info, 1);
 }
+#endif
 
 static struct flash_platform_data *multi_pdata;
 
Index: linux-3.3.8/arch/mips/ath79/mach-ta361.c
===================================================================
--- /dev/null
+++ linux-3.3.8/arch/mips/ath79/mach-ta361.c
@@ -0,0 +1,157 @@
+/*
+ * Atheros TA361 reference board support
+ *
+ * Copyright (c) 2013 The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ */
+
+#include <linux/platform_device.h>
+#include <linux/ath9k_platform.h>
+#include <linux/ar8216_platform.h>
+
+#include <asm/mach-ath79/ar71xx_regs.h>
+
+#include "common.h"
+#include "dev-eth.h"
+#include "dev-gpio-buttons.h"
+#include "dev-leds-gpio.h"
+#include "dev-m25p80.h"
+#include "dev-spi.h"
+#include "dev-usb.h"
+#include "dev-wmac.h"
+#include "machtypes.h"
+#include "pci.h"
+
+#define TA361_GPIO_LED_WLAN		12
+#define TA361_GPIO_LED_WPS		13
+#define TA361_GPIO_LED_STATUS		13
+
+#define TA361_GPIO_LED_WAN		4
+#define TA361_GPIO_LED_LAN1		16
+#define TA361_GPIO_LED_LAN2		15
+#define TA361_GPIO_LED_LAN3		14
+#define TA361_GPIO_LED_LAN4		11
+
+#define TA361_GPIO_BTN_WPS		17
+
+#define TA361_KEYS_POLL_INTERVAL	20	/* msecs */
+#define TA361_KEYS_DEBOUNCE_INTERVAL	(3 * TA361_KEYS_POLL_INTERVAL)
+
+#define TA361_MAC0_OFFSET		0
+#define TA361_MAC1_OFFSET		6
+#define TA361_WMAC_CALDATA_OFFSET	0x1000
+
+#define TA361_GPIO_EXPANDER_GPIO_SPI_CS     16  /* EXPANDER GPIO SPI CS */ 
+#if 0
+static struct gpio_led ta361_leds_gpio[] __initdata = {
+	{
+		.name		= "ta361:green:status",
+		.gpio		= TA361_GPIO_LED_STATUS,
+		.active_low	= 1,
+	},
+	{
+		.name		= "ta361:green:wlan",
+		.gpio		= TA361_GPIO_LED_WLAN,
+		.active_low	= 1,
+	}
+};
+
+static struct gpio_keys_button ta361_gpio_keys[] __initdata = {
+	{
+		.desc		= "WPS button",
+		.type		= EV_KEY,
+		.code		= KEY_WPS_BUTTON,
+		.debounce_interval = TA361_KEYS_DEBOUNCE_INTERVAL,
+		.gpio		= TA361_GPIO_BTN_WPS,
+		.active_low	= 1,
+	},
+};
+
+static void __init ta361_gpio_led_setup(void)
+{
+	ath79_gpio_direction_select(TA361_GPIO_LED_WAN, true);
+	ath79_gpio_direction_select(TA361_GPIO_LED_LAN1, true);
+	ath79_gpio_direction_select(TA361_GPIO_LED_LAN2, true);
+	ath79_gpio_direction_select(TA361_GPIO_LED_LAN3, true);
+	ath79_gpio_direction_select(TA361_GPIO_LED_LAN4, true);
+
+	ath79_gpio_output_select(TA361_GPIO_LED_WAN,
+			QCA953X_GPIO_OUT_MUX_LED_LINK5);
+	ath79_gpio_output_select(TA361_GPIO_LED_LAN1,
+			QCA953X_GPIO_OUT_MUX_LED_LINK1);
+	ath79_gpio_output_select(TA361_GPIO_LED_LAN2,
+			QCA953X_GPIO_OUT_MUX_LED_LINK2);
+	ath79_gpio_output_select(TA361_GPIO_LED_LAN3,
+			QCA953X_GPIO_OUT_MUX_LED_LINK3);
+	ath79_gpio_output_select(TA361_GPIO_LED_LAN4,
+			QCA953X_GPIO_OUT_MUX_LED_LINK4);
+
+	ath79_register_leds_gpio(-1, ARRAY_SIZE(ta361_leds_gpio),
+			ta361_leds_gpio);
+	ath79_register_gpio_keys_polled(-1, TA361_KEYS_POLL_INTERVAL,
+			ARRAY_SIZE(ta361_gpio_keys),
+			ta361_gpio_keys);
+}
+#endif
+
+static void __init ta361_setup(void)
+{
+	u8 *art = (u8 *) KSEG1ADDR(0x1fff0000);
+
+	
+	/* disable jtag gpio2 */
+	ath79_gpio_function_enable(AR934X_GPIO_FUNC_JTAG_DISABLE);
+
+    /* enable gpio expander spi cs */
+	ath79_gpio_direction_select(TA361_GPIO_EXPANDER_GPIO_SPI_CS, true);
+	ath79_gpio_output_select(TA361_GPIO_EXPANDER_GPIO_SPI_CS,
+			QCA953X_GPIO_OUT_MUX_SPI_CS1);
+			
+	ath79_register_m25p80(NULL);
+
+    /* There is not led on TA361-00 cpu gpio, all of led is on expander gpio */
+	//ta361_gpio_led_setup();
+
+	ath79_register_usb();
+	ath79_register_pci();
+
+	ath79_register_wmac(art + TA361_WMAC_CALDATA_OFFSET, NULL);
+
+	ath79_register_mdio(0, 0x0);
+	ath79_register_mdio(1, 0x0);
+
+	ath79_init_mac(ath79_eth0_data.mac_addr, art + TA361_MAC0_OFFSET, 0);
+	ath79_init_mac(ath79_eth1_data.mac_addr, art + TA361_MAC1_OFFSET, 0);
+
+	/* WAN port */
+	ath79_eth0_data.phy_if_mode = PHY_INTERFACE_MODE_MII;
+	ath79_eth0_data.speed = SPEED_100;
+	ath79_eth0_data.duplex = DUPLEX_FULL;
+	ath79_eth0_data.phy_mask = BIT(0);
+	ath79_register_eth(0);
+
+	
+	ath79_setup_ar933x_phy4_switch(1,0);
+	/* LAN ports */
+	ath79_eth1_data.phy_if_mode = PHY_INTERFACE_MODE_GMII;
+	ath79_eth1_data.speed = SPEED_100;
+	ath79_eth1_data.duplex = DUPLEX_FULL;
+	ath79_switch_data.phy_poll_mask |= BIT(0);
+	ath79_switch_data.phy4_mii_en = 1;
+	ath79_register_eth(1);
+}
+
+MIPS_MACHINE(ATH79_MACH_CUSTOM_TA361, "ta361", "Custom TA361 board",
+	     ta361_setup);
Index: linux-3.3.8/arch/mips/ath79/machtypes.h
===================================================================
--- linux-3.3.8.orig/arch/mips/ath79/machtypes.h
+++ linux-3.3.8/arch/mips/ath79/machtypes.h
@@ -132,6 +132,7 @@ enum ath79_mach_type {
 	ATH79_MACH_WZR_HP_G450H,	/* Buffalo WZR-HP-G450H */
 	ATH79_MACH_ZCN_1523H_2,		/* Zcomax ZCN-1523H-2-xx */
 	ATH79_MACH_ZCN_1523H_5,		/* Zcomax ZCN-1523H-5-xx */
+	ATH79_MACH_CUSTOM_TA361,	/* Custom TA361 */
 };
 
 #endif /* _ATH79_MACHTYPE_H */
Index: linux-3.3.8/drivers/gpio/Kconfig
===================================================================
--- linux-3.3.8.orig/drivers/gpio/Kconfig
+++ linux-3.3.8/drivers/gpio/Kconfig
@@ -443,6 +443,13 @@ config GPIO_MCP23S08
 	  I/O expanders.
 	  This provides a GPIO interface supporting inputs and outputs.
 
+config GPIO_XRA1403
+	tristate "Microchip XRA140X I/O expander"
+	depends on SPI_MASTER
+	help
+	  SPI driver for Microchip XRA1403
+	  I/O expanders.
+	  This provides a GPIO interface supporting inputs and outputs.
 config GPIO_MC33880
 	tristate "Freescale MC33880 high-side/low-side switch"
 	depends on SPI_MASTER
Index: linux-3.3.8/drivers/gpio/Makefile
===================================================================
--- linux-3.3.8.orig/drivers/gpio/Makefile
+++ linux-3.3.8/drivers/gpio/Makefile
@@ -27,6 +27,7 @@ obj-$(CONFIG_GPIO_MAX7301)	+= gpio-max73
 obj-$(CONFIG_GPIO_MAX732X)	+= gpio-max732x.o
 obj-$(CONFIG_GPIO_MC33880)	+= gpio-mc33880.o
 obj-$(CONFIG_GPIO_MCP23S08)	+= gpio-mcp23s08.o
+obj-$(CONFIG_GPIO_XRA1403)	+= gpio-xra1403.o
 obj-$(CONFIG_GPIO_ML_IOH)	+= gpio-ml-ioh.o
 obj-$(CONFIG_GPIO_MPC5200)	+= gpio-mpc5200.o
 obj-$(CONFIG_GPIO_MPC8XXX)	+= gpio-mpc8xxx.o
Index: linux-3.3.8/drivers/gpio/gpio-xra1403.c
===================================================================
--- /dev/null
+++ linux-3.3.8/drivers/gpio/gpio-xra1403.c
@@ -0,0 +1,410 @@
+/*
+ * XRA1403 SPI/GPIO gpio expander driver
+ */
+
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/mutex.h>
+#include <linux/module.h>
+#include <linux/gpio.h>
+
+#include <linux/spi/spi.h>
+#include <linux/spi/xra1403.h>
+#include <linux/slab.h>
+#include <asm/byteorder.h>
+
+
+
+struct xra1403;
+
+struct xra1403_ops {
+	int	(*read)(struct xra1403 *xra, unsigned reg);
+	int	(*write)(struct xra1403 *xra, unsigned reg, unsigned val);
+	int	(*read_regs)(struct xra1403 *xra, unsigned reg,
+			     u16 *vals, unsigned n);
+};
+
+struct xra1403{
+	u16			cache[COMMAND_NUM]; /*command cache */
+	/* lock protects the cached values */
+	struct mutex		lock;
+
+	struct gpio_chip	chip;
+
+	const struct xra1403_ops	*ops;
+	void			*data; /* ops specific data */
+};
+
+
+struct xra1403_driver_data {
+	unsigned		ngpio;
+	struct xra1403	xra;
+};
+
+/*----------------------------------------------------------------------*/
+
+static int xra1403_read(struct xra1403 *xra, unsigned reg)
+{
+	u8	tx[1], rx[1];
+	int	status;
+	
+	tx[0] = reg << 1 | (COMMAND_RD << COMMAND_RDWR_SHIFT) ; /*Command Byte: no 1-6 bit  read-1/write-0  : no 7 bit */
+	status = spi_write_then_read(xra->data, tx, sizeof tx, rx, sizeof rx);
+	return (status < 0) ? status : (rx[0]);
+}
+
+static int xra1403_write(struct xra1403 *xra, unsigned reg, unsigned val)
+{
+	u8	tx[2];
+	
+	tx[0] = reg << 1;
+	tx[1] = val;
+	return spi_write_then_read(xra->data, tx, sizeof tx, NULL, 0);
+}
+
+
+static int
+xra1403_read_regs(struct xra1403 *xra, unsigned reg, u16 *vals, unsigned n)
+{
+	u8	tx[2];
+	int	status;
+	tx[0] = reg << 1| (COMMAND_RD << COMMAND_RDWR_SHIFT) ;
+
+	status = spi_write_then_read(xra->data, tx, sizeof tx,
+				     (u8 *)vals, n * 2);
+	if (status >= 0) {
+		while (n--)
+			vals[n] = __le16_to_cpu((__le16)vals[n]);
+	}
+
+	return status;
+}
+
+static const struct xra1403_ops xra1403_ops = {
+	.read		= xra1403_read,
+	.write		= xra1403_write,
+	.read_regs	= xra1403_read_regs,
+};
+
+
+
+/*----------------------------------------------------------------------*/
+
+static int xra1403_direction_input(struct gpio_chip *chip, unsigned offset)
+{
+	struct xra1403	*xra = container_of(chip, struct xra1403, chip);
+	int status;
+
+	if(offset < 0 || offset >=16)
+		return 0;
+	mutex_lock(&xra->lock);
+	if(offset< 8){
+		xra->cache[COMMAND_BYTE_GCR1] = xra1403_read(xra,COMMAND_BYTE_GCR1);
+		xra->cache[COMMAND_BYTE_GCR1] |= (1 << offset);
+		status = xra->ops->write(xra, COMMAND_BYTE_GCR1, xra->cache[COMMAND_BYTE_GCR1]);
+	}
+	else{
+		offset -= 8;
+		xra->cache[COMMAND_BYTE_GCR2] = xra1403_read(xra,COMMAND_BYTE_GCR2);
+		xra->cache[COMMAND_BYTE_GCR2] |= (1 << (offset));
+		status = xra->ops->write(xra, COMMAND_BYTE_GCR2, xra->cache[COMMAND_BYTE_GCR2]);
+	}
+	
+	
+	mutex_unlock(&xra->lock);
+	return status;
+}
+
+static int xra1403_get(struct gpio_chip *chip, unsigned offset)
+{
+	struct xra1403	*xra = container_of(chip, struct xra1403, chip);
+	int status;
+
+	if(offset < 0 || offset >=16)
+		return 0;
+
+	mutex_lock(&xra->lock);
+
+	if(offset< 8){
+		status = xra->ops->read(xra, COMMAND_BYTE_GSR1);
+		if (status < 0)
+			status = 0;
+		else {
+			xra->cache[COMMAND_BYTE_GSR1] = status;
+			status = !!(status & (1 << offset));
+		}
+	}
+	else
+	{
+		status = xra->ops->read(xra, COMMAND_BYTE_GSR2);
+		if (status < 0)
+			status = 0;
+		else {
+			offset -= 8;
+			xra->cache[COMMAND_BYTE_GSR2] = status;
+			status = !!(status & (1 << (offset)));
+		}
+	}
+	
+	mutex_unlock(&xra->lock);
+	return status;
+}
+
+static int __xra1403_set(struct xra1403 *xra, unsigned mask, int value,unsigned reg)
+{
+	unsigned outcache;
+	xra->cache[reg] = xra1403_read(xra,reg);
+	
+	outcache = xra->cache[reg];
+	if (value)
+		outcache |= mask;
+	else
+		outcache &= ~mask;
+	xra->cache[reg] = outcache;
+	return xra->ops->write(xra, reg, outcache);
+}
+
+static void xra1403_set(struct gpio_chip *chip, unsigned offset, int value)
+{
+	struct xra1403	*xra = container_of(chip, struct xra1403, chip);
+	unsigned mask;
+
+	if(offset < 0 || offset >=16)
+		return ;
+	
+	mutex_lock(&xra->lock);
+
+	if(offset< 8){
+		mask = 1 << offset;
+		__xra1403_set(xra,mask,value,COMMAND_BYTE_OCR1);
+	}
+	else
+	{
+		offset -= 8;
+		mask = 1 << offset;
+		__xra1403_set(xra,mask,value,COMMAND_BYTE_OCR2);
+	}
+	
+	mutex_unlock(&xra->lock);
+	return;
+}
+
+static int
+xra1403_direction_output(struct gpio_chip *chip, unsigned offset, int value)
+{
+	struct xra1403	*xra = container_of(chip, struct xra1403, chip);
+	unsigned mask;
+	int status;
+
+	if(offset < 0 || offset >=16)
+		return 0;
+	mutex_lock(&xra->lock);
+	if(offset< 8){
+		mask = 1 << offset;
+		xra->cache[COMMAND_BYTE_GCR1] = xra1403_read(xra,COMMAND_BYTE_GCR1);
+		//printk("%s %d xra->cache[COMMAND_BYTE_GCR1] %x \n",__FUNCTION__,__LINE__,xra->cache[COMMAND_BYTE_GCR1]);
+		xra->cache[COMMAND_BYTE_GCR1] &= ~mask;
+		//printk("%s %d xra->cache[COMMAND_BYTE_GCR1] %x \n",__FUNCTION__,__LINE__,xra->cache[COMMAND_BYTE_GCR1]);
+		status = xra->ops->write(xra, COMMAND_BYTE_GCR1, xra->cache[COMMAND_BYTE_GCR1]);
+	}
+	else
+	{
+		offset -= 8;
+		mask = 1 << offset;
+		xra->cache[COMMAND_BYTE_GCR2] = xra1403_read(xra,COMMAND_BYTE_GCR2);
+		//printk("%s %d xra->cache[COMMAND_BYTE_GCR2] %x \n",__FUNCTION__,__LINE__,xra->cache[COMMAND_BYTE_GCR2]);
+		xra->cache[COMMAND_BYTE_GCR2] &= ~mask;
+		//printk("%s %d xra->cache[COMMAND_BYTE_GCR2] %x \n",__FUNCTION__,__LINE__,xra->cache[COMMAND_BYTE_GCR2]);
+		status = xra->ops->write(xra, COMMAND_BYTE_GCR2, xra->cache[COMMAND_BYTE_GCR2]);
+	}
+	mutex_unlock(&xra->lock);
+	return status;
+}
+
+/*----------------------------------------------------------------------*/
+
+#ifdef CONFIG_DEBUG_FS
+
+#include <linux/seq_file.h>
+
+/*
+ * This shows more info than the generic gpio dump code:
+ * pullups, deglitching, open drain drive.
+ */
+static void xra1403_dbg_show(struct seq_file *s, struct gpio_chip *chip)
+{
+	return;
+}
+
+#else
+#define xra1403_dbg_show	NULL
+#endif
+
+/*----------------------------------------------------------------------*/
+
+static int xra1403_probe_one(struct xra1403 *xra, struct device *dev,
+			      void *data, unsigned addr,
+			      unsigned type, unsigned base)
+{
+	int status;
+
+	mutex_init(&xra->lock);
+
+	xra->data = data;
+
+	xra->chip.direction_input = xra1403_direction_input;
+	xra->chip.get = xra1403_get;
+	xra->chip.direction_output = xra1403_direction_output;
+	xra->chip.set = xra1403_set;
+	xra->chip.dbg_show = xra1403_dbg_show;
+
+	switch (type) {
+	case 0:
+		xra->ops = &xra1403_ops;
+		xra->chip.ngpio = 16;
+		xra->chip.label = "xra1403-0";
+		break;
+	case 1:
+		xra->ops = &xra1403_ops;
+		xra->chip.ngpio = 16;
+		xra->chip.label = "xra1403-1";
+		break;
+	default:
+		dev_err(dev, "invalid device type (%d)\n", type);
+		return -EINVAL;
+	}
+
+	xra->chip.base = base;
+	xra->chip.can_sleep = 1;
+	xra->chip.dev = dev;
+	xra->chip.owner = THIS_MODULE;
+
+	/*register value init*/
+	xra->cache[COMMAND_BYTE_GCR1] = 0xffff;
+	xra->cache[COMMAND_BYTE_GCR2] = 0xffff;
+
+	status = gpiochip_add(&xra->chip);
+	if (status < 0)
+		dev_dbg(dev, "can't setup chip %d, --> %d\n",
+			addr, status);
+
+	//printk("%s %d  base %d  \n",__FUNCTION__,__LINE__,xra->chip.base);
+	return status;
+}
+
+/*----------------------------------------------------------------------*/
+
+
+
+/*----------------------------------------------------------------------*/
+
+static int xra1403_probe(struct spi_device *spi)
+{
+	struct xra1403_platform_data	*pdata;
+	unsigned			addr;
+	struct xra1403_driver_data	*data;
+	int				status, type;
+
+	unsigned	base;
+
+	type = spi_get_device_id(spi)->driver_data;
+
+	pdata = spi->dev.platform_data;
+
+	if(!pdata)
+		base = -1;
+
+	data = kzalloc(sizeof(struct xra1403_driver_data),
+			GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+	spi_set_drvdata(spi, data);
+
+	status = xra1403_probe_one(&data->xra, &spi->dev, spi,
+				    addr, type,base
+				    );
+	if (status < 0)
+		goto fail;
+
+	return 0;
+
+fail:
+	kfree(data);
+	return status;
+}
+
+static int xra1403_remove(struct spi_device *spi)
+{
+	struct xra1403_driver_data	*data = spi_get_drvdata(spi);
+	int				status = 0;
+	int tmp;
+	tmp = gpiochip_remove(&data->xra.chip);
+	if (tmp < 0) {
+		dev_err(&spi->dev, "%s --> %d\n", "remove", tmp);
+		status = tmp;
+	}
+	
+	if (status == 0)
+		kfree(data);
+	return status;
+}
+
+static const struct spi_device_id xra1403_ids[] = {
+      { "xra1403-0", 0 },
+      { "xra1403-1", 1 },
+	{ },
+};
+MODULE_DEVICE_TABLE(spi, xra1403_ids);
+
+static struct spi_driver xra1403_driver = {
+	.probe		= xra1403_probe,
+	.remove		= xra1403_remove,
+	.id_table	= xra1403_ids,
+	.driver = {
+		.name	= "xra1403",
+		.owner	= THIS_MODULE,
+	},
+};
+
+static int __init xra1403_spi_init(void)
+{
+	return spi_register_driver(&xra1403_driver);
+}
+
+static void xra1403_spi_exit(void)
+{
+	spi_unregister_driver(&xra1403_driver);
+}
+
+
+
+/*----------------------------------------------------------------------*/
+
+static int __init xra1403_init(void)
+{
+	int ret;
+
+	ret = xra1403_spi_init();
+	if (ret)
+		goto spi_fail;
+
+
+ spi_fail:
+	return ret;
+}
+/* register after spi  postcore initcall and before
+ * subsys initcalls that may rely on these GPIOs
+ */
+subsys_initcall(xra1403_init);
+
+static void __exit xra1403_exit(void)
+{
+	xra1403_spi_exit();
+}
+module_exit(xra1403_exit);
+
+MODULE_LICENSE("GPL");
+
+
+
+
Index: linux-3.3.8/include/linux/spi/xra1403.h
===================================================================
--- /dev/null
+++ linux-3.3.8/include/linux/spi/xra1403.h
@@ -0,0 +1,54 @@
+#ifndef _XRA1403_H__
+#define _XRA1403_H__
+
+struct xra1403_platform_data {
+	/* number assigned to the first GPIO */
+	unsigned	base;
+};
+
+/*	start define command_byte	*/
+#define	COMMAND_BYTE_GSR1		0x00
+#define	COMMAND_BYTE_GSR2		0X01
+#define	COMMAND_BYTE_OCR1		0X02
+#define	COMMAND_BYTE_OCR2		0X03
+#define	COMMAND_BYTE_PIR1		0X04
+#define	COMMAND_BYTE_PIR2		0X05
+#define COMMAND_BYTE_GCR1 		0X06
+#define COMMAND_BYTE_GCR2		0X07
+#define	COMMAND_BYTE_PUR1		0X08
+#define	COMMAND_BYTE_PUR2		0X09
+#define	COMMAND_BYTE_IER1		0xA
+#define COMMAND_BYTE_IER2		0xB
+#define	COMMAND_BYTE_TSCR1		0xC
+#define COMMAND_BYTE_TSCR2		0xD
+#define	COMMAND_BYTE_ISR1		0xE
+#define COMMAND_BYTE_ISR2		0xF
+#define COMMAND_BYTE_REIR1	0x10
+#define COMMAND_BYTE_REIR2	0x11
+#define COMMAND_BYTE_FEIR1	0X12
+#define COMMAND_BYTE_FEIR2	0x13
+#define COMMAND_BYTE_IFR1		0x14
+#define COMMAND_BYTE_IFR2		0x15
+
+#define COMMAND_NUM		0x15
+/*	 end define command_byte	*/
+
+
+/*	start define shift	*/
+#define	COMMAND_BYTE_SHIFT	1
+#define COMMAND_SHIFT			8
+#define COMMAND_RDWR_SHIFT	7
+/*	end define shift	*/
+
+/*	start define wr/rd	*/
+#define COMMAND_RD			1
+#define	COMMAND_WR			0
+/*	end define wr/rd	*/
+
+
+#endif
+
+
+
+
+
